package com.osman.traviaskbot.service;

import com.osman.traviaskbot.entity.Reservation;
import com.osman.traviaskbot.repository.ReservationRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class ReservationOptimizer {

    private final ReservationRepository reservationRepository;
    private final GeocodingService geocodingService;
    private final VrpService vrpService;

    public void optimize(List<Reservation> reservations) {
        log.info("\uD83D\uDEA0 Optimize ediliyor, toplam rezervasyon: {}", reservations.size());

        // Ge√ßerli pickup adresi olanlarƒ± filtrele
        List<Reservation> validReservations = reservations.stream()
                .filter(r -> r.getPickup() != null && !r.getPickup().isBlank())
                .collect(Collectors.toList());

        int skippedCount = reservations.size() - validReservations.size();
        if (skippedCount > 0) {
            List<String> skippedNames = reservations.stream()
                    .filter(r -> r.getPickup() == null || r.getPickup().isBlank())
                    .map(Reservation::getCustomer)
                    .collect(Collectors.toList());
            log.warn("‚ùó {} rezervasyon pickup adresi eksik, optimize edilmeyecek. M√º≈üteriler: {}", skippedCount, skippedNames);
        }

        if (validReservations.isEmpty()) {
            log.warn("‚ùå Ge√ßerli pickup adresi olan hi√ß rezervasyon bulunamadƒ±. Optimize i≈ülemi iptal.");
            return;
        }

        // ≈ûof√∂r ba≈ülangƒ±√ß noktalarƒ±
        List<double[]> driverStarts = new ArrayList<>();
        driverStarts.add(new double[]{36.876074, 31.086317}); // depo koordinatƒ±

        // Pickup noktalarƒ±nƒ± coƒürafi koordinatlara √ßevir
        List<double[]> pickups = new ArrayList<>();
        List<Integer> paxList = new ArrayList<>();

        // ‚ùó Pickup adresleri i√ßin cache
        Map<String, double[]> pickupCache = new HashMap<>();

        for (Reservation res : validReservations) {
            try {
                double[] latLng;
                if (pickupCache.containsKey(res.getPickup())) {
                    latLng = pickupCache.get(res.getPickup());
                    log.info("‚ôªÔ∏è Cache'den alƒ±ndƒ±: {}", res.getPickup());
                } else {
                    latLng = geocodingService.geocode(res.getPickup());
                    pickupCache.put(res.getPickup(), latLng);
                    log.info("üß≠ Geocode edildi: {}", res.getPickup());
                }

                if (latLng != null) {
                    pickups.add(latLng);
                    paxList.add(2); // ≈ûimdilik her rezervasyon 2 ki≈üi gibi
                } else {
                    log.warn("‚ùó Geocode sonucu null geldi: {}", res.getPickup());
                }
            } catch (Exception e) {
                log.warn("‚ùó Pickup geocode edilemedi, rezervasyon atlandƒ±: {}", res.getPickup(), e);
            }
        }

        if (pickups.isEmpty()) {
            log.warn("‚ùå Hi√ß pickup noktasƒ± bulunamadƒ±, optimizasyon iptal.");
            return;
        }

        // VRP √ß√∂z√ºm√º yap
        Map<Integer, List<Integer>> solution = vrpService.solveVrp(driverStarts, pickups, paxList, driverStarts.size());

        if (solution.isEmpty()) {
            log.warn("‚ùå VRP √ß√∂z√ºm√º bo≈ü d√∂nd√º!");
            return;
        }

        // √á√∂z√ºm√º logla
        for (Map.Entry<Integer, List<Integer>> entry : solution.entrySet()) {
            int vehicle = entry.getKey();
            List<Integer> route = entry.getValue();
            log.info("\uD83D\uDE98 Ara√ß {} rotasƒ±: {}", vehicle, route);
        }

        log.info("‚úÖ Rota optimizasyonu ba≈üarƒ±yla tamamlandƒ±.");
    }
}
